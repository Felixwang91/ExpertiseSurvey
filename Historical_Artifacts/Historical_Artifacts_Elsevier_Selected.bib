
@article{gasparic_what_2016,
	title = {What recommendation systems for software engineering recommend: {A} systematic literature review},
	volume = {113},
	issn = {0164-1212},
	shorttitle = {What recommendation systems for software engineering recommend},
	url = {http://www.sciencedirect.com/science/article/pii/S0164121215002605},
	doi = {10.1016/j.jss.2015.11.036},
	abstract = {A recommendation system for software engineering (RSSE) is a software application that provides information items estimated to be valuable for a software engineering task in a given context. Present the results of a systematic literature review to reveal the typical functionality offered by existing RSSEs, research gaps, and possible research directions. We evaluated 46 papers studying the benefits, the data requirements, the information and recommendation types, and the effort requirements of RSSE systems. We include papers describing tools that support source code related development published between 2003 and 2013. The results show that RSSEs typically visualize source code artifacts. They aim to improve system quality, make the development process more efficient and less expensive, lower developer’s cognitive load, and help developers to make better decisions. They mainly support reuse actions and debugging, implementation, and maintenance phases. The majority of the systems are reactive. Unexploited opportunities lie in the development of recommender systems outside the source code domain. Furthermore, current RSSE systems use very limited context information and rely on simple models. Context-adapted and proactive behavior could improve the acceptance of RSSE systems in practice.},
	urldate = {2018-03-20},
	journal = {Journal of Systems and Software},
	author = {Gasparic, Marko and Janes, Andrea},
	month = mar,
	year = {2016},
	keywords = {Recommendation system for software engineering, Systematic literature review},
	pages = {101--113},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/RR67AT5S/Gasparic and Janes - 2016 - What recommendation systems for software engineeri.pdf:application/pdf;ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/X5EK4TTG/Gasparic and Janes - 2016 - What recommendation systems for software engineeri.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/NZ2CMZ92/S0164121215002605.html:text/html;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/DLL24NMK/S0164121215002605.html:text/html}
}

@article{sowe_understanding_2008,
	series = {Selected {Papers} from the 2006 {Brazilian} {Symposia} on {Databases} and on {Software} {Engineering}},
	title = {Understanding knowledge sharing activities in free/open source software projects: {An} empirical study},
	volume = {81},
	issn = {0164-1212},
	shorttitle = {Understanding knowledge sharing activities in free/open source software projects},
	url = {http://www.sciencedirect.com/science/article/pii/S0164121207000842},
	doi = {10.1016/j.jss.2007.03.086},
	abstract = {Free/Open Source Software (F/OSS) projects are people-oriented and knowledge intensive software development environments. Many researchers focused on mailing lists to study coding activities of software developers. How expert software developers interact with each other and with non-developers in the use of community products have received little attention. This paper discusses the altruistic sharing of knowledge between knowledge providers and knowledge seekers in the Developer and User mailing lists of the Debian project. We analyze the posting and replying activities of the participants by counting the number of email messages they posted to the lists and the number of replies they made to questions others posted. We found out that participants interact and share their knowledge a lot, their positing activity is fairly highly correlated with their replying activity, the characteristics of posting and replying activities are different for different kinds of lists, and the knowledge sharing activity of self-organizing Free/Open Source communities could best be explained in terms of what we called “Fractal Cubic Distribution” rather than the power-law distribution mostly reported in the literature. The paper also proposes what could be researched in knowledge sharing activities in F/OSS projects mailing list and for what purpose. The research findings add to our understanding of knowledge sharing activities in F/OSS projects.},
	number = {3},
	urldate = {2018-03-20},
	journal = {Journal of Systems and Software},
	author = {Sowe, Sulayman K. and Stamelos, Ioannis and Angelis, Lefteris},
	month = mar,
	year = {2008},
	keywords = {Knowledge providers, Knowledge seekers, Knowledge sharing, Mailing lists, Open source communities, Open source software projects, Power-law distribution, Self-organizing communities},
	pages = {431--446},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/ZFRDADYI/Sowe et al. - 2008 - Understanding knowledge sharing activities in free.pdf:application/pdf;ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/V6J64GBG/Sowe et al. - 2008 - Understanding knowledge sharing activities in free.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/5ZN43G44/S0164121207000842.html:text/html;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/9FCSA9C6/S0164121207000842.html:text/html}
}

@article{ghobadi_what_2015,
	title = {What drives knowledge sharing in software development teams: {A} literature review and classification framework},
	volume = {52},
	issn = {0378-7206},
	shorttitle = {What drives knowledge sharing in software development teams},
	url = {http://www.sciencedirect.com/science/article/pii/S0378720614001323},
	doi = {10.1016/j.im.2014.10.008},
	abstract = {Although scholars have long studied knowledge sharing drivers within software development teams, our knowledge remains fragmented by the divergent efforts that are based on and contribute to theoretical perspectives. This study provides a review of the extant literature (1993–2011) on knowledge sharing drivers in software teams and establishes a classification framework using an organizational change perspective. A synthesis of the literature uncovers diverse themes and gaps in the existing body of knowledge, suggests several paths for advancing theory on knowledge sharing in software development contexts, and discusses implications for practitioners concerned with knowledge sharing in software development.},
	number = {1},
	urldate = {2018-03-20},
	journal = {Information \& Management},
	author = {Ghobadi, Shahla},
	month = jan,
	year = {2015},
	keywords = {Information system development, Knowledge sharing, Knowledge transfer, Literature review, Software development, Software teams},
	pages = {82--97},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/EADP56Z2/Ghobadi - 2015 - What drives knowledge sharing in software developm.pdf:application/pdf;ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/LK5PTEKY/Ghobadi - 2015 - What drives knowledge sharing in software developm.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/D7SLPHF2/S0378720614001323.html:text/html;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/HMU2QTY9/S0378720614001323.html:text/html}
}

@article{bjornson_knowledge_2008,
	title = {Knowledge management in software engineering: {A} systematic review of studied concepts, findings and research methods used},
	volume = {50},
	issn = {0950-5849},
	shorttitle = {Knowledge management in software engineering},
	url = {http://www.sciencedirect.com/science/article/pii/S0950584908000487},
	doi = {10.1016/j.infsof.2008.03.006},
	abstract = {Software engineering is knowledge-intensive work, and how to manage software engineering knowledge has received much attention. This systematic review identifies empirical studies of knowledge management initiatives in software engineering, and discusses the concepts studied, the major findings, and the research methods used. Seven hundred and sixty-two articles were identified, of which 68 were studies in an industry context. Of these, 29 were empirical studies and 39 reports of lessons learned. More than half of the empirical studies were case studies. The majority of empirical studies relate to technocratic and behavioural aspects of knowledge management, while there are few studies relating to economic, spatial and cartographic approaches. A finding reported across multiple papers was the need to not focus exclusively on explicit knowledge, but also consider tacit knowledge. We also describe implications for research and for practice.},
	number = {11},
	urldate = {2018-03-20},
	journal = {Information and Software Technology},
	author = {Bjørnson, Finn Olav and Dingsøyr, Torgeir},
	month = oct,
	year = {2008},
	keywords = {Knowledge management, Learning software organization, Software engineering, Software process improvement, Systematic review},
	pages = {1055--1068},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/6SW2JZGD/Bjørnson and Dingsøyr - 2008 - Knowledge management in software engineering A sy.pdf:application/pdf;ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/37RG4AE4/Bjørnson and Dingsøyr - 2008 - Knowledge management in software engineering A sy.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/YVDV6I8N/S0950584908000487.html:text/html;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/K3AB7QRC/S0950584908000487.html:text/html}
}

@article{licorish_understanding_2014,
	series = {Special issue: {Human} {Factors} in {Software} {Development}},
	title = {Understanding the attitudes, knowledge sharing behaviors and task performance of core developers: {A} longitudinal study},
	volume = {56},
	issn = {0950-5849},
	shorttitle = {Understanding the attitudes, knowledge sharing behaviors and task performance of core developers},
	url = {http://www.sciencedirect.com/science/article/pii/S095058491400038X},
	doi = {10.1016/j.infsof.2014.02.004},
	abstract = {Context
Prior research has established that a few individuals generally dominate project communication and source code changes during software development. Moreover, this pattern has been found to exist irrespective of task assignments at project initiation.
Objective
While this phenomenon has been noted, prior research has not sought to understand these dominant individuals. Previous work considering the effect of team structures on team performance has found that core communicators are the gatekeepers of their teams’ knowledge, and the performance of these members was correlated with their teams’ success. Building on this work, we have employed a longitudinal approach to study the way core developers’ attitudes, knowledge sharing behaviors and task performance change over the course of their project, based on the analysis of repository data.
Method
We first used social network analysis (SNA) and standard statistical analysis techniques to identify and select artifacts from ten different software development teams. These procedures were also used to select central practitioners among these teams. We then applied psycholinguistic analysis and directed content analysis (CA) techniques to interpret the content of these practitioners’ messages. Finally, we inspected these core developers’ activities as recorded in system change logs at various points in time during systems’ development.
Results
Among our findings, we observe that core developers’ attitudes and knowledge sharing behaviors were linked to their involvement in actual software development and the demands of their wider project teams. However, core developers appeared to naturally possess high levels of insightful characteristics, which became evident very early during teamwork.
Conclusions
Project performance would likely benefit from strategies aimed at surrounding core developers with other competent communicators. Core developers should also be supported by a wider team who are willing to ask questions and challenge their ideas. Finally, the availability of adequate communication channels would help with maintaining positive team climate, and this is likely to mitigate the negative effects of distance during distributed developments.},
	number = {12},
	urldate = {2018-03-20},
	journal = {Information and Software Technology},
	author = {Licorish, Sherlock A. and MacDonell, Stephen G.},
	month = dec,
	year = {2014},
	keywords = {Attitudes, Content analysis, Core developers, Knowledge sharing, Psycholinguistics, Task performance},
	pages = {1578--1596},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/IBIA8E4D/Licorish and MacDonell - 2014 - Understanding the attitudes, knowledge sharing beh.pdf:application/pdf;ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/CIBDFFKW/Licorish and MacDonell - 2014 - Understanding the attitudes, knowledge sharing beh.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/HY6R3SE2/S095058491400038X.html:text/html;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/83R4PP52/S095058491400038X.html:text/html}
}

@article{hu_reputation_2012,
	title = {Reputation management in an open source developer social network: {An} empirical study on determinants of positive evaluations},
	volume = {53},
	issn = {0167-9236},
	shorttitle = {Reputation management in an open source developer social network},
	url = {http://www.sciencedirect.com/science/article/pii/S0167923612000632},
	doi = {10.1016/j.dss.2012.02.005},
	abstract = {Successful development of open source software (OSS) projects requires a steady supply of self motivated software developers. Thus a large body of OSS studies focuses on studying the developers' participation motivations. One important motivation is an OSS developer's desire to gain good community reputation which is largely based on positive evaluations from his peers. Therefore, to better motivate developers' project participations through their reputation needs, our empirical analysis adopted a social network perspective to study what factors may affect a developer's decision to positively evaluate one other in a large online open source community called Ohloh. The results surprisingly show that a developer's positive evaluation decision does not depend on his evaluatee's level of OSS-related experience, but rather based on 1) his past reputation (i.e. existing number of positive evaluations), 2) their shared affiliations such as mutual acquaintances, as well as 3) their homophily in location (city), nationality, programming language preference, and community status. We then discuss these findings and their implications for inducing more positive evaluations and better reputation management among open source project members. To the best of our knowledge, this paper is the first research that investigates issues of reputation building and relationship management in an open source development context.},
	number = {3},
	urldate = {2018-03-20},
	journal = {Decision Support Systems},
	author = {Hu, Daning and Zhao, J. Leon and Cheng, Jiesi},
	month = jun,
	year = {2012},
	keywords = {Open source software, Positive evaluation, Reputation management, Social network analysis},
	pages = {526--533},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/9A3VWRKM/Hu et al. - 2012 - Reputation management in an open source developer .pdf:application/pdf;ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/BXPQ9FM6/Hu et al. - 2012 - Reputation management in an open source developer .pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/RLKJ22FC/S0167923612000632.html:text/html;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/LGMJFQDX/S0167923612000632.html:text/html}
}

@article{behfar_knowledge_2018,
	title = {Knowledge management in {OSS} communities: {Relationship} between dense and sparse network structures},
	volume = {38},
	issn = {0268-4012},
	shorttitle = {Knowledge management in {OSS} communities},
	url = {http://www.sciencedirect.com/science/article/pii/S0268401217306072},
	doi = {10.1016/j.ijinfomgt.2017.09.004},
	abstract = {Some authors in the literature have addressed knowledge transfer via weak ties between organization’s units which are themselves strongly tied inside (e.g. Hansen, 1999). Some others have investigated knowledge management among open-source-software (OSS) developers and discussed factors influencing knowledge transfer within development teams (e.g. Joshi and Sarker, 2006). In the domain of open source software (OSS) communities, more companies are now attempting to establish relationships to benefit from these potential value-creating communities; and project managers could in fact target different goals within software development teams including knowledge transfer within and between teams. We step forward to distinguish knowledge transfer within groups as opposed to knowledge transfer between groups; where relevant projects are bundled into separate strongly intra-connected groups. In knowledge management literature there is a trade-off between sparse network structures (Burt, 2000, 2002) versus dense network structures (Walker et al., 1997; Coleman, 1988). It is argued that the former facilitates the diffusion and generation of ideas among groups, while the latter affects the implementation of idea within each dense group. To our best knowledge, there has been no study to investigate the relationship between dense and sparse network structures. We propose that knowledge transfer within dense groups has a positive influence on knowledge transfer between sparse groups, in that intragroup density, group size, developers centrality and betweenness could impact intergroup coupling. To prove our hypothesis, we use a complex network of open source software (OSS) as the domain of interest, where developers represent nodes and two developers contributing to a project task represent a network tie. Developers contributing to tasks in groups other than their own can explore novel ideas via sharing knowledge, whereas developers contributing to tasks inside groups exploit ideas to improve those projects. We investigate the idea both analytically and empirically within 4 months, 8 months and 1year lagged time, and finally show that intragroup density has a positive whereas developers’ centrality has a negative influence on intergroup coupling.},
	number = {1},
	urldate = {2018-03-20},
	journal = {International Journal of Information Management},
	author = {Behfar, Stefan Kambiz and Turkina, Ekaterina and Burger-Helmchen, Thierry},
	month = feb,
	year = {2018},
	keywords = {Intergroup coupling, Intergroup diffusion of innovation, Intragroup density, Knowledge transfer, Open source software network},
	pages = {167--174},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/7A67S3AV/Behfar et al. - 2018 - Knowledge management in OSS communities Relations.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/PXHQ3NNW/S0268401217306072.html:text/html}
}

@article{peng_network_2013,
	title = {Network ties and the success of open source software development},
	volume = {22},
	issn = {0963-8687},
	url = {http://www.sciencedirect.com/science/article/pii/S0963868713000474},
	doi = {10.1016/j.jsis.2013.05.001},
	abstract = {Prior network-based research on open source software (OSS) development has focused on the benefit of network ties and assumed all network ties play the same role. We adopt a fine-grained view of network relations to investigate the impact of network ties on the success of OSS development. Through examining the development of OSS projects hosted by SourceForge, we find that co-membership among project teams is an effective mechanism for building network ties, through which knowledge and expertise flows across projects in OSS community and, therefore, contributes to the success of OSS development. However, network ties among projects not only confer benefit, but also incur various cost, and due to the different growth patterns of cost and benefit, network ties have a diminishing return to project success. In addition, we find network ties of leader–follower type and follower–leader type are more beneficial to OSS success than other types of ties, and network ties connecting to projects of later development stages are more beneficial than those connecting to projects of earlier stages. Our study provides useful guidelines and suggestions as to how to leverage the knowledge and expertise of others for successful development of OSS projects.},
	number = {4},
	urldate = {2018-03-20},
	journal = {The Journal of Strategic Information Systems},
	author = {Peng, Gang and Wan, Yun and Woodlock, Peter},
	month = dec,
	year = {2013},
	keywords = {Knowledge flow, Learning, Network ties, Open source software (OSS), Project co-membership, Project success, Social networks},
	pages = {269--281},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/JKRANYGQ/Peng et al. - 2013 - Network ties and the success of open source softwa.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/MXW42H5S/S0963868713000474.html:text/html}
}

@article{gren_non-technical_2018,
	title = {Non-technical individual skills are weakly connected to the maturity of agile practices},
	issn = {0950-5849},
	url = {http://www.sciencedirect.com/science/article/pii/S0950584918300223},
	doi = {10.1016/j.infsof.2018.02.006},
	abstract = {Context: Existing knowledge in agile software development suggests that individual competency (e.g. skills) is a critical success factor for agile projects. While assuming that technical skills are important for every kind of software development project, many researchers suggest that non-technical individual skills are especially important in agile software development. Objective: In this paper, we investigate whether non-technical individual skills can predict the use of agile practices. Method: Through creating a set of multiple linear regression models using a total of 113 participants from agile teams in six software development organizations from The Netherlands and Brazil, we analyzed the predictive power of non-technical individual skills in relation to agile practices. Results: The results show that there is surprisingly low power in using non-technical individual skills to predict (i.e. explain variance in) the mature use of agile practices in software development. Conclusions: Therefore, we conclude that looking at non-technical individual skills is not the optimal level of analysis when trying to understand, and explain, the mature use of agile practices in the software development context. We argue that it is more important to focus on the non-technical skills as a team-level capacity instead of assuring that all individuals possess such skills when understanding the use of the agile practices.},
	urldate = {2018-03-20},
	journal = {Information and Software Technology},
	author = {Gren, Lucas and Knauss, Alessia and Stettina, Christoph Johann},
	month = feb,
	year = {2018},
	keywords = {Agile practices, Code quality, Empirical study, Skills},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/VETX8HSR/Gren et al. - 2018 - Non-technical individual skills are weakly connect.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/Z4RXU24L/S0950584918300223.html:text/html}
}

@article{de_vasconcelos_application_2017,
	title = {The application of knowledge management to software evolution},
	volume = {37},
	issn = {0268-4012},
	url = {http://www.sciencedirect.com/science/article/pii/S0268401216302833},
	doi = {10.1016/j.ijinfomgt.2016.05.005},
	abstract = {In complex software development projects, consistent planning and communication between the stakeholders is crucial for effective collaboration across the different stages in software construction. Taking the view of software development and maintenance as being part of the broader phenomenon of software evolution, this paper argues that the adoption of knowledge management practices in software engineering would improve both software construction and more particularly software maintenance. The research work presents a guidance model for both areas: knowledge management and software engineering, combining insights across corporate software projects as a means of evaluating the effects on people and organization, technology, workflows and processes.},
	number = {1, Part A},
	urldate = {2018-03-20},
	journal = {International Journal of Information Management},
	author = {de Vasconcelos, José Braga and Kimble, Chris and Carreteiro, Paulo and Rocha, Álvaro},
	month = feb,
	year = {2017},
	keywords = {Collaborative work, Knowledge management, Software development process, Software engineering, Software maintenance},
	pages = {1499--1506},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/WXBBCF4C/de Vasconcelos et al. - 2017 - The application of knowledge management to softwar.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/DC67F23Z/S0268401216302833.html:text/html}
}

@article{smite_software_2017,
	title = {Software teams and their knowledge networks in large-scale software development},
	volume = {86},
	issn = {0950-5849},
	url = {http://www.sciencedirect.com/science/article/pii/S0950584917300435},
	doi = {10.1016/j.infsof.2017.01.003},
	abstract = {Context
Large software development projects involve multiple interconnected teams, often spread around the world, developing complex products for a growing number of customers and users. Succeeding with large-scale software development requires access to an enormous amount of knowledge and skills. Since neither individuals nor teams can possibly possess all the needed expertise, the resource availability in a team's knowledge network, also known as social capital, and effective knowledge coordination become paramount.
Objective
In this paper, we explore the role of social capital in terms of knowledge networks and networking behavior in large-scale software development projects.
Method
We conducted a multi-case study in two organizations, Ericsson and ABB, with software development teams as embedded units of analysis. We organized focus groups with ten software teams and surveyed 61 members from these teams to characterize and visualize the teams’ knowledge networks. To complement the team perspective, we conducted individual interviews with representatives of supporting and coordination roles. Based on survey data, data obtained from focus groups, and individual interviews, we compared the different network characteristics and mechanisms that support knowledge networks. We used social network analysis to construct the team networks, thematic coding to identify network characteristics and context factors, and tabular summaries to identify the trends.
Results
Our findings indicate that social capital and networking are essential for both novice and mature teams when solving complex, unfamiliar, or interdependent tasks. Network size and networking behavior depend on company experience, employee turnover, team culture, need for networking, and organizational support. A number of mechanisms can support the development of knowledge networks and social capital, for example, introduction of formal technical experts, facilitation of communities of practice and adequate communication infrastructure.
Conclusions
Our study emphasizes the importance of social capital and knowledge networks. Therefore, we suggest that, along with investments into training programs, software companies should also cultivate a networking culture to strengthen their social capital, a known driver of better performance.},
	urldate = {2018-03-20},
	journal = {Information and Software Technology},
	author = {Šmite, Darja and Moe, Nils Brede and Šāblis, Aivars and Wohlin, Claes},
	month = jun,
	year = {2017},
	keywords = {Agile, Case study, Cross-functional, Empirical, Feature teams, Intellectual capital, Knowledge networks, Large-scale software development, Social capital, Teams},
	pages = {71--86},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/Z2B7FW62/Šmite et al. - 2017 - Software teams and their knowledge networks in lar.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/CMQK3XWX/S0950584917300435.html:text/html}
}

@article{sowe_identifying_2006,
	title = {Identifying knowledge brokers that yield software engineering knowledge in {OSS} projects},
	volume = {48},
	issn = {0950-5849},
	url = {http://www.sciencedirect.com/science/article/pii/S0950584906000073},
	doi = {10.1016/j.infsof.2005.12.019},
	abstract = {Much research on open source software development concentrates on developer lists and other software repositories to investigate what motivates professional software developers to participate in open source software projects. Little attention has been paid to individuals who spend valuable time in lists helping participants on some mundane yet vital project activities. Using three Debian lists as a case study we investigate the impact of knowledge brokers and their associated activities in open source projects. Social network analysis was used to visualize how participants are affiliated with the lists. The network topology reveals substantial community participation. The consequence of collaborating in mundane activities for the success of open source software projects is discussed. The direct beneficiaries of this research are in the identification of knowledge experts in open source software projects.},
	number = {11},
	urldate = {2018-03-20},
	journal = {Information and Software Technology},
	author = {Sowe, Sulayman and Stamelos, Ioannis and Angelis, Lefteris},
	month = nov,
	year = {2006},
	keywords = {Debian, Mailing lists, Mundane activities, Open source software projects, Social networks, Visualization},
	pages = {1025--1033},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/TBSCTL8G/Sowe et al. - 2006 - Identifying knowledge brokers that yield software .pdf:application/pdf;ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/BKJASEZR/Sowe et al. - 2006 - Identifying knowledge brokers that yield software .pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/N58KEWRK/S0950584906000073.html:text/html;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/92CFBRQK/S0950584906000073.html:text/html}
}

@incollection{bialy_3_2017,
	address = {Boston},
	title = {3 - {Software} {Engineering} for {Model}-{Based} {Development} by {Domain} {Experts}},
	isbn = {978-0-12-803773-7},
	url = {https://www.sciencedirect.com/science/article/pii/B9780128037737000036},
	abstract = {Model-Based Development (MBD) has been gaining traction in the development of embedded software in many industries, especially in safety-critical domains. The models are typically described using domain-specific languages and tools that are readily accessible to the domain experts. Consequently, domain experts, despite not having formal software engineering training, find themselves creating models (designs) from which code is generated, thus effectively contributing to the design and coding activities of software development. This new role for domain experts as software developers can have a direct impact on the system safety if the domain experts do not follow software engineering best practices. In this chapter, we describe our experiences as software engineers in multiyear collaborations with domain experts from the automotive industry, who are developing embedded software with the MBD approach. We provide guidelines that strengthen the collaboration between domain experts and software engineers and improve the quality, and hence safety, of embedded software systems developed using MBD. We clarify the role of some of the most commonly used software engineering principles and artefacts, while also addressing issues and misconceptions encountered in adopting software engineering practices in MBD. Although this chapter focuses on the MBD of automotive embedded software in Matlab Simulink, the guidelines we provide are applicable to the MBD of software in general.},
	urldate = {2018-03-20},
	booktitle = {Handbook of {System} {Safety} and {Security}},
	publisher = {Syngress},
	author = {Bialy, M. and Pantelic, V. and Jaskolka, J. and Schaap, A. and Patcas, L. and Lawford, M. and Wassyng, A.},
	editor = {Griffor, Edward},
	year = {2017},
	doi = {10.1016/B978-0-12-803773-7.00003-6},
	keywords = {automotive, domain experts, embedded software, functional safety, model-based development, Simulink, Software engineering},
	pages = {39--64},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/QF4B25TI/Bialy et al. - 2017 - 3 - Software Engineering for Model-Based Developme.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/YHTCFNQ4/B9780128037737000036.html:text/html}
}

@article{otero_fuzzy_2012,
	title = {A fuzzy expert system architecture for capability assessments in skill-based environments},
	volume = {39},
	issn = {0957-4174},
	url = {http://www.sciencedirect.com/science/article/pii/S0957417411010190},
	doi = {10.1016/j.eswa.2011.07.057},
	abstract = {The fast pace at which new technologies and techniques are being developed to improve the design and development of products increases the demand for specialized individual skills in the workforce. As a result of higher demands, candidates with exact required skills to work tasks are usually unavailable. Due to the lack of proper methods to assess personnel capabilities, decision makers are forced to assign resources to tasks based on shallow assessments. To tackle this issue, this research presents a layered expert architecture where subcomponents can be customized to specific industrial settings. A fuzzy logic scheme is described to model personnel capabilities as imprecise parameters, and to consider complete skill sets of resources when evaluating their levels of expertise in a skill. The proposed approach leads to thorough capability assessments, as well as an increased number of capable candidates. A case study is presented to show the implementation of the solution approach.},
	number = {1},
	urldate = {2018-03-20},
	journal = {Expert Systems with Applications},
	author = {Otero, Luis Daniel and Otero, Carlos E.},
	month = jan,
	year = {2012},
	keywords = {Capability assessments, Fuzzy expert system, Resource allocation, Software engineering},
	pages = {654--662},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/RGHTHQQF/Otero and Otero - 2012 - A fuzzy expert system architecture for capability .pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/3RV2RLTT/S0957417411010190.html:text/html}
}

@article{wieland_combining_2017,
	title = {Combining expert knowledge with machine learning on the basis of fuzzy training},
	volume = {38},
	issn = {1574-9541},
	url = {http://www.sciencedirect.com/science/article/pii/S1574954116301388},
	doi = {10.1016/j.ecoinf.2017.01.001},
	abstract = {The paper introduces a fuzzy training approach based on nonlinear regularization in an effort to avoid over training. The main idea is to restrict training so that the basic expert knowledge used to build the model is still visible. This is implemented by a new nonlinear regularization approach which can be applied to any kind of training data set. The approach is demonstrated using a large crop yield data set ({\textgreater}4500 field records) for sugar beet collected in agricultural farms over a 14-year period (1976–1989) in East Germany. The software is implemented in SAMT2, free and open source software, using the Python programming language.},
	urldate = {2018-03-20},
	journal = {Ecological Informatics},
	author = {Wieland, Ralf and Mirschel, Wilfried},
	month = mar,
	year = {2017},
	keywords = {Expert knowledge, Fuzzy modeling, Machine learning, Nonlinear regularization, Optimization, Yield modeling},
	pages = {26--30},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/MKRPNLKD/Wieland and Mirschel - 2017 - Combining expert knowledge with machine learning o.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/5T4BYQW4/S1574954116301388.html:text/html}
}

@article{serna_m._knowledge_2017,
	title = {Knowledge meaning and management in requirements engineering},
	volume = {37},
	issn = {0268-4012},
	url = {http://www.sciencedirect.com/science/article/pii/S0268401216306582},
	doi = {10.1016/j.ijinfomgt.2017.01.005},
	abstract = {It is traditionally assumed that requirements specification, as a product of requirements engineering, has a high impact on the ensuing software development stages. Therefore, the knowledge management used to construct the requirements specification should be performed in a structured manner to discover, analyze and understand the data–information–knowledge chain, both tacit and explicit, that the interested parties possess. In this article, the results of a literature review are presented, seeking to answer the following questions: (1) What is the meaning of knowledge in requirements engineering? (2) What approaches are proposed to manage knowledge in requirements engineering? (3) Can the efficiency and the efficacy of knowledge management models be evidenced in requirements engineering? Thirty-six works were chosen for analysis out of a total 83 found in our search. The analysis showed that (1) knowledge has a central significance at this stage, but the authors have yet to agree on the best methods to impart and apply that knowledge; (2) no general framework has emerged as a validated approach to manage knowledge for requirements engineering; and (3) the evaluation marks for model efficiency and efficacy are low, consisting mostly of personal interpretations.},
	number = {3},
	urldate = {2018-03-20},
	journal = {International Journal of Information Management},
	author = {Serna M., Edgar and Bachiller S., Oscar and Serna A., Alexei},
	month = jun,
	year = {2017},
	keywords = {Knowledge management, Knowledge meaning, Requirements elicitation, Software engineering},
	pages = {155--161},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/JYHJEV6A/Serna M. et al. - 2017 - Knowledge meaning and management in requirements e.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/I7CZXQKH/S0268401216306582.html:text/html}
}

@incollection{rosson_chapter_1997,
	address = {Amsterdam},
	title = {Chapter 46 - {Expertise} and {Instruction} in {Software} {Development}},
	isbn = {978-0-444-81862-1},
	url = {https://www.sciencedirect.com/science/article/pii/B9780444818621501126},
	abstract = {This chapter surveys the research of the late 1980s and early 1990s on the nature of software development expertise and approaches to teaching software development skills. This literature shows that several complementary developments address the limitations of the early work. The chapter reviews how a cognitive science perspective was employed to develop a theoretical framework for interpreting and refining the empirical studies. Instead of focusing on the efficacy of particular features, research began to characterize the knowledge and skill of programmers and how that knowledge and skill is acquired and developed. Further, the chapter reviews how studies of software expertise have raised the level of analysis from individual lines of code to the design of software systems and to the teamwork involved in such activities. Finally, the chapter examines research and development of programming and design instruction that incorporates these new perspectives on software development expertise.},
	urldate = {2018-03-20},
	booktitle = {Handbook of {Human}-{Computer} {Interaction} ({Second} {Edition})},
	publisher = {North-Holland},
	author = {Rosson, Mary Beth and Carroll, John M.},
	editor = {Helander, Marting G. and Landauer, Thomas K. and Prabhu, Prasad V.},
	year = {1997},
	doi = {10.1016/B978-044481862-1.50112-6},
	pages = {1105--1126},
	file = {ScienceDirect Snapshot:/Users/Felix/Zotero/storage/E8PU7JUQ/B9780444818621501126.html:text/html}
}

@article{vasquez-bravo_knowledge_2014,
	title = {Knowledge management acquisition improvement by using software engineering elicitation techniques},
	volume = {30},
	issn = {0747-5632},
	url = {http://www.sciencedirect.com/science/article/pii/S0747563213003312},
	doi = {10.1016/j.chb.2013.09.003},
	abstract = {The knowledge externalization phase involves acquiring and transferring the knowledge of individuals to an abstract and effective representation, to organize it, to model it and finally to express this knowledge in an understandable and reusable format. This phase presents some difficulties at the moment to choose the technique that best fit with the knowledge type to be elicited, and sometimes the selected technique is not complete enough to capture all the relevant knowledge for a specific domain. In sum, there are not mechanisms that can be used as a discernment element at the moment to choose the knowledge elicitation technique that better adjust to a particular situation. This paper presents the results obtained from an empirical validation developed to determine the efficiency of knowledge acquisition in the externalization phase of Nonaka’s model, using a set of software engineering elicitation techniques. Efficiency compared with quality of the knowledge acquired can provide a good mechanism to select the most suitable technique to knowledge externalization for each situation.},
	urldate = {2018-03-20},
	journal = {Computers in Human Behavior},
	author = {Vásquez-Bravo, Diana-Marcela and Sánchez-Segura, María-Isabel and Medina-Domínguez, Fuensanta and Amescua, Antonio},
	month = jan,
	year = {2014},
	keywords = {Knowledge acquisition efficiency, Knowledge elicitation, Knowledge externalization, Requirements elicitation techniques},
	pages = {721--730},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/K4TUTSEY/Vásquez-Bravo et al. - 2014 - Knowledge management acquisition improvement by us.pdf:application/pdf;ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/QQURRZH5/Vásquez-Bravo et al. - 2014 - Knowledge management acquisition improvement by us.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/NJQN3HHP/S0747563213003312.html:text/html;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/KIMSGKEN/S0747563213003312.html:text/html}
}

@article{ryan_acquiring_2013,
	title = {Acquiring and sharing tacit knowledge in software development teams: {An} empirical study},
	volume = {55},
	issn = {0950-5849},
	shorttitle = {Acquiring and sharing tacit knowledge in software development teams},
	url = {http://www.sciencedirect.com/science/article/pii/S0950584913000591},
	doi = {10.1016/j.infsof.2013.02.013},
	abstract = {Context
Sharing expert knowledge is a key process in developing software products. Since expert knowledge is mostly tacit, the acquisition and sharing of tacit knowledge along with the development of a transactive memory system (TMS) are significant factors in effective software teams.
Objective
We seek to enhance our understanding human factors in the software development process and provide support for the agile approach, particularly in its advocacy of social interaction, by answering two questions: How do software development teams acquire and share tacit knowledge? What roles do tacit knowledge and transactive memory play in successful team performance?
Method
A theoretical model describing the process for acquiring and sharing tacit knowledge and development of a TMS through social interaction is presented and a second predictive model addresses the two research questions above. The elements of the predictive model and other demographic variables were incorporated into a larger online survey for software development teams, completed by 46 software SMEs, consisting of 181 individual team members.
Results
Our results show that team tacit knowledge is acquired and shared directly through good quality social interactions and through the development of a TMS with quality of social interaction playing a greater role than transactive memory. Both TMS and team tacit knowledge predict effectiveness but not efficiency in software teams.
Conclusion
It is concluded that TMS and team tacit knowledge can differentiate between low- and high-performing teams in terms of effectiveness, where more effective teams have a competitive advantage in developing new products and bringing them to market. As face-to-face social interaction is key, collocated, functionally rich, domain expert teams are advocated rather than distributed teams, though arguably the team manager may be in a separate geographic location provided that there is frequent communication and effective use of issue tracking tools as in agile teams.},
	number = {9},
	urldate = {2018-03-20},
	journal = {Information and Software Technology},
	author = {Ryan, Sharon and O’Connor, Rory V.},
	month = sep,
	year = {2013},
	keywords = {Agile teams, Social interaction, Tacit knowledge, Team performance, Transactive memory},
	pages = {1614--1624},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/INSNDUFH/Ryan and O’Connor - 2013 - Acquiring and sharing tacit knowledge in software .pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/9TMZVRZP/S0950584913000591.html:text/html}
}

@article{carillo_what_2017,
	title = {What makes a good contributor? {Understanding} contributor behavior within large {Free}/{Open} {Source} {Software} projects – {A} socialization perspective},
	volume = {26},
	issn = {0963-8687},
	shorttitle = {What makes a good contributor?},
	url = {http://www.sciencedirect.com/science/article/pii/S0963868716301196},
	doi = {10.1016/j.jsis.2017.03.001},
	abstract = {Attracting new contributors is a necessary but not a sufficient condition, to ensure the survival and long-term success of Free/Open Source Software (FOSS) projects. The well-being of a FOSS project depends on the turning of project newcomers into ‘good contributors’ that is to say into individuals that substantially contribute to the project - but also that perform citizenship behaviors that protect and nurture its community. This study is a mixed-methods investigation of the socialization factors that influence contributor performance in large FOSS projects. A qualitative research component resulted into the development of a FOSS socialization framework as well as into the identification of key FOSS project citizenship behaviors. A conceptual model was then developed and empirically examined with 367 contributors from 12 large FOSS projects. The model hypothesizes the mediating effect of two proximal socialization variables, social identification and social integration, between FOSS newcomer socialization factors and contributor performance (conceptualized as task performance and community citizenship behaviors). The results demonstrate the influence of social identification and social integration in predicting contributor performance, as well as the importance of key socialization factors that are: task segregation, task purposefulness, interaction intensity, and supportiveness. Theoretical and practical implications are discussed.},
	number = {4},
	urldate = {2018-03-20},
	journal = {The Journal of Strategic Information Systems},
	author = {Carillo, Kevin and Huff, Sid and Chawner, Brenda},
	month = dec,
	year = {2017},
	keywords = {Citizenship behaviors, Free/Open Source Software community, Free/Open Source Software project, Mixed-methods, Socialization},
	pages = {322--359},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/884XEBVC/Carillo et al. - 2017 - What makes a good contributor Understanding contr.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/3ZGKTSDH/S0963868716301196.html:text/html}
}

@article{bednarik_expertise-dependent_2012,
	title = {Expertise-dependent visual attention strategies develop over time during debugging with multiple code representations},
	volume = {70},
	issn = {1071-5819},
	url = {http://www.sciencedirect.com/science/article/pii/S1071581911001388},
	doi = {10.1016/j.ijhcs.2011.09.003},
	abstract = {In modern multi-representational environments, software developers need to coordinate various information sources to effectively perform maintenance tasks. Although visual attention is an important skill in software development, our current understanding of the role of visual attention in the coordination of representations during maintenance tasks is minimal. Therefore, we applied eye-tracking to capture visual attention strategies and construct a detailed account of visual attention during debugging. Two groups of programmers with two distinct levels of experience debugged a program with the help of multiple representations. The proportion of time spent looking at each representation, the frequency of switching attention between visualrepresentations and the type of switch were investigated during consecutive phases of debugging. We found repetitive patterns in visual strategies that were associated with less expertise and lower performance. Novice developers made use of both the code and graphical representations while frequently switching between them. More experienced participants expended more efforts integrating the available information and primarily concentrated on systematically relating the code to the output. Our results informed us about the differences in program debugging strategies from a fine-grain, temporal perspective and have implications for the design of future development environments.},
	number = {2},
	urldate = {2018-03-20},
	journal = {International Journal of Human-Computer Studies},
	author = {Bednarik, Roman},
	month = feb,
	year = {2012},
	keywords = {Expertise in programming, Program debugging, Visual attention},
	pages = {143--155},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/KBM767QY/Bednarik - 2012 - Expertise-dependent visual attention strategies de.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/TRCS8GLH/S1071581911001388.html:text/html}
}

@article{eriksson_survey_1992,
	title = {A survey of knowledge acquisition techniques and tools and their relationship to software engineering},
	volume = {19},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/pii/016412129290023D},
	doi = {10.1016/0164-1212(92)90023-D},
	abstract = {Knowledge acquisition deals with the modeling of expertise for expert systems. Although research in this area has concentrated on artificial intelligence systems for knowledge-intensive domains, the knowledge acquisition problem occurs frequently in general program development. Many knowledge acquisition techniques and approaches to tool support are relevant for software engineering, especially in complex domains and during early analysis stages.},
	number = {1},
	urldate = {2018-03-20},
	journal = {Journal of Systems and Software},
	author = {Eriksson, Henrik},
	month = sep,
	year = {1992},
	pages = {97--107},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/LJX89MFY/Eriksson - 1992 - A survey of knowledge acquisition techniques and t.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/35VE7REV/016412129290023D.html:text/html}
}

@article{corbin_three-tier_2007,
	series = {Evaluation and {Assessment} in {Software} {Engineering}},
	title = {A three-tier knowledge management scheme for software engineering support and innovation},
	volume = {80},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/pii/S016412120700009X},
	doi = {10.1016/j.jss.2007.01.013},
	abstract = {To ensure smooth and successful transition of software innovations to enterprise systems, it is critical to maintain proper levels of knowledge about the system configuration, the operational environment, and the technology in both existing and new systems. We present a three-tier knowledge management scheme through a systematic planning of actions spanning the transition processes in levels from conceptual exploration to prototype development, experimentation, and product evaluation. The three-tier scheme is an integrated effort for bridging the development and operation communities, maintaining stability to the operational performance, and adapting swiftly to software technology innovations. The scheme combines experiences of academic researches and industrial practitioners to provide necessary technical expertise and qualifications for knowledge management in software engineering support (SES) processes.},
	number = {9},
	urldate = {2018-03-20},
	journal = {Journal of Systems and Software},
	author = {Corbin, Richard D. and Dunbar, Christopher B. and Zhu, Qiuming},
	month = sep,
	year = {2007},
	keywords = {Human and system interaction, Knowledge management, Software engineering process, Software system support, Technology innovation},
	pages = {1494--1505},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/NIGEBMDZ/Corbin et al. - 2007 - A three-tier knowledge management scheme for softw.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/KS799UVN/S016412120700009X.html:text/html}
}

@article{cherry_social_2008,
	series = {Collaborative and social aspects of software development},
	title = {The social side of software engineering—{A} real ad hoc collaboration network},
	volume = {66},
	issn = {1071-5819},
	url = {http://www.sciencedirect.com/science/article/pii/S1071581908000141},
	doi = {10.1016/j.ijhcs.2008.01.002},
	abstract = {Recognised first and foremost as a technical task, the construction of software is, for the most part, a human experience. Software development is an intensive cognitive task, which also constitutes an exercise in complex interrelationships. This paper presents a case study conducted to analyse ad hoc collaborative activities taking place between team-mates during an industrial software development cycle. Observations based on audio–video recording are analysed with a methodology from social sciences research. The paper describes the observational approaches, the various methods used to validate data and how quantitative data are extracted from the qualitative observations of team-mates. Patterns of ad hoc collaboration emerging from this study are revealed, which lead us to believe that both the implicit and explicit roles of partners have a definitive impact on their ad hoc interaction profiles. As a result, this study helps to provide an understanding of some of the pivotal aspects of software engineering, such as collaboration, coordination and, more generally, work team dynamics. Further details relating to our initial motivations are included, followed by a comprehensive description of the methodological approach designed specifically for this research. Finally, some results are presented, which shed light on a real ad hoc collaboration network and support the importance of the human and social aspects of software engineering in a more substantial way.},
	number = {7},
	urldate = {2018-03-20},
	journal = {International Journal of Human-Computer Studies},
	author = {Cherry, Sébastien and Robillard, Pierre N.},
	month = jul,
	year = {2008},
	keywords = {Case study, Cognitive activities, collaboration, Exchanges patterns, Face-to-face exchange, Sharing of knowledge, Software development},
	pages = {495--505},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/LL9GJ3V5/Cherry and Robillard - 2008 - The social side of software engineering—A real ad .pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/KX9JQE6A/S1071581908000141.html:text/html}
}

@article{sarimbekov_dynamic_2014,
	series = {Special {Section}: {ACM} {SAC}-{SVT} 2013 + {Bytecode} 2013},
	title = {Dynamic program analysis—{Reconciling} developer productivity and tool performance},
	volume = {95},
	issn = {0167-6423},
	url = {http://www.sciencedirect.com/science/article/pii/S0167642314001543},
	doi = {10.1016/j.scico.2014.03.014},
	abstract = {Dynamic program analysis tools serve many important software engineering tasks such as profiling, debugging, testing, program comprehension, and reverse engineering. Many dynamic analysis tools rely on program instrumentation and are implemented using low-level instrumentation libraries, resulting in tedious and error-prone tool development. Targeting this issue, we have created the Domain-Specific Language for Instrumentation (DiSL), which offers high-level programming abstractions especially designed for instrumentation-based dynamic analysis. When designing DiSL, our goal was to boost the productivity of tool developers targeting the Java Virtual Machine, without impairing the performance of the resulting tools. In this paper we assess whether DiSL meets this goal. First, we perform a controlled experiment to measure tool development time and correctness of the developed tools, comparing DiSL with a prevailing, state-of-the-art instrumentation library. Second, we recast 10 open-source software engineering tools in DiSL and compare source code metrics and performance with the original implementations. Our studies show that DiSL significantly improves developer productivity, enables concise tool implementations, and does not have any negative impact on tool performance.},
	urldate = {2018-03-20},
	journal = {Science of Computer Programming},
	author = {Sarimbekov, Aibek and Zheng, Yudi and Ansaloni, Danilo and Bulej, Lubomír and Marek, Lukáš and Binder, Walter and Tůma, Petr and Qi, Zhengwei},
	month = dec,
	year = {2014},
	keywords = {Bytecode instrumentation, Controlled experiment, Development productivity, Dynamic program analysis},
	pages = {344--358},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/4Y4JD5TK/Sarimbekov et al. - 2014 - Dynamic program analysis—Reconciling developer pro.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/EC7AKIAN/S0167642314001543.html:text/html}
}

@article{chun_software_1996,
	title = {Software integration of real-time expert systems},
	volume = {4},
	issn = {0967-0661},
	url = {http://www.sciencedirect.com/science/article/pii/0967066195002103},
	doi = {10.1016/0967-0661(95)00210-3},
	abstract = {A technique to achieve real-time computing throughput from rule-based expert systems is discussed. Using compilation, compaction, and parallelization techniques, this research synthesizes a set of concurrently executable Ada tasks from a knowledge base of rules. A prototype compilation system based on this approach has demonstrated speedups in excess of 100X along with increased embeddability of the knowledge base. The work is being extended into a software engineering development environment for expert systems whereby programming constructs from both the procedural and rule-based language domains are made available to the user. The approach strives to present the engineer with programming templates that protect him from the intricate control mechanisms of the inference engine, and enable him to concentrate on problem solving at higher levels of abstraction.},
	number = {1},
	urldate = {2018-03-20},
	journal = {Control Engineering Practice},
	author = {Chun, R. K.},
	month = jan,
	year = {1996},
	keywords = {Artificial Intelligence, Expert Systems, Heuristic Programming, Inference Processes, Knowledge Engineering, Parallel Processing, Software Engineering},
	pages = {83--88},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/ZJHX3MZR/Chun - 1996 - Software integration of real-time expert systems.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/CKUG93DZ/0967066195002103.html:text/html}
}

@article{grimstad_inconsistency_2007,
	title = {Inconsistency of expert judgment-based estimates of software development effort},
	volume = {80},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/pii/S0164121207000714},
	doi = {10.1016/j.jss.2007.03.001},
	abstract = {Expert judgment-based effort estimation of software development work is partly based on non-mechanical and unconscious processes. For this reason, a certain degree of intra-person inconsistency is expected, i.e., the same information presented to the same individual at different occasions sometimes lead to different effort estimates. In this paper, we report from an experiment where seven experienced software professionals estimated the same sixty software development tasks over a period of three months. Six of the sixty tasks were estimated twice. We found a high degree of inconsistency in the software professionals’ effort estimates. The mean difference of the effort estimates of the same task by the same estimator was as much as 71\%. The correlation between the corresponding estimates was 0.7. Highly inconsistent effort estimates will, on average, be inaccurate and difficult to learn from. It is consequently important to focus estimation process improvement on consistency issues and thereby contribute to reduced budget-overruns, improved time-to-market, and better quality software.},
	number = {11},
	urldate = {2018-03-20},
	journal = {Journal of Systems and Software},
	author = {Grimstad, Stein and Jørgensen, Magne},
	month = nov,
	year = {2007},
	keywords = {Effort estimation, Expert judgment, Software development},
	pages = {1770--1777},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/D89DBKF9/Grimstad and Jørgensen - 2007 - Inconsistency of expert judgment-based estimates o.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/4DBM8NNX/S0164121207000714.html:text/html}
}

@article{aurum_investigating_2008,
	title = {Investigating {Knowledge} {Management} practices in software development organisations – {An} {Australian} experience},
	volume = {50},
	issn = {0950-5849},
	url = {http://www.sciencedirect.com/science/article/pii/S0950584907000602},
	doi = {10.1016/j.infsof.2007.05.005},
	abstract = {This study, using both quantitative and qualitative methods, investigates current practice of Knowledge Management (KM) in Software Engineering (SE) processes in two Australian companies on the basis that they both claimed to apply KM practices in their software development work. It also describes the KM activities and KM process used in SE practice, and examines the enablers of KM process for SE in terms of leadership, technology, culture, process and measurement. One of the main findings showed that software developers believe in the usefulness of knowledge sharing; however, their ability to utilise some of the KM systems was limited. The most commonly used systems included personal networks, informal networks, groupware and third-party knowledge. There is a need to formalise knowledge sharing of practices, while also supporting informal and ad-hoc knowledge sharing. While KM was considered to be important, the tools, techniques and methodologies currently employed for software development were inadequate to address effective management of knowledge in these organisations. In both organisations, a uniform model of the KM process did not exist. Among the four KM enablers, leadership was considered to be the most significant as top-down KM strategies were seemingly being pursued by management. Technology was also considered to be an obvious mechanism for KM, despite some of their current KM systems either being unsuitable or inaccessible. In addition, the crucial role that personal networks played in accessing tacit and implicit knowledge was seen as a key reason to foster a culture that encourages participants to share their knowledge with others.},
	number = {6},
	urldate = {2018-03-20},
	journal = {Information and Software Technology},
	author = {Aurum, Aybüke and Daneshgar, Farhad and Ward, James},
	month = may,
	year = {2008},
	keywords = {KM activities, KM process enablers, Knowledge Management, Software Engineering, Software process models},
	pages = {511--533},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/6AU9FVYJ/Aurum et al. - 2008 - Investigating Knowledge Management practices in so.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/CWEHKQEM/S0950584907000602.html:text/html}
}

@article{sun_enhancing_2017,
	title = {Enhancing developer recommendation with supplementary information via mining historical commits},
	volume = {134},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/pii/S0164121217302091},
	doi = {10.1016/j.jss.2017.09.021},
	abstract = {Given a software issue request, one important activity is to recommend suitable developers to resolve it. A number of approaches have been proposed on developer recommendation. These developer recommendation techniques tend to recommend experienced developers, i.e., the more experienced a developer is, the more possible he/she is recommended. However, if the experienced developers are hectic, the junior developers may be employed to finish the incoming issue. But they may have difficulty in these tasks for lack of development experience. In this article, we propose an approach, EDR\_SI, to enhance developer recommendation by considering their expertise and developing habits. Furthermore, EDR\_SI also provides the personalized supplementary information for developers to use, such as personalized source code files, developer network and source-code change history. An empirical study on five open source subjects is conducted to evaluate the effectiveness of EDR\_SI. In our study, EDR\_SI is also compared with the state-of-art developer recommendation techniques, iMacPro, Location and ABA-Time-tf-idf, to evaluate the effectiveness of developer recommendation, and the results show that EDR\_SI can not only improve the accuracy of developer recommendation, but also effectively provide useful supplementary information for them to use when they implement the incoming issue requests.},
	urldate = {2018-03-20},
	journal = {Journal of Systems and Software},
	author = {Sun, Xiaobing and Yang, Hui and Xia, Xin and Li, Bin},
	month = dec,
	year = {2017},
	keywords = {Bug assignment, Collaborative topic modeling, Commit repository, Developer recommendation, Personalized recommendation, Supplementary information recommendation},
	pages = {355--368},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/CSRVV7WR/Sun et al. - 2017 - Enhancing developer recommendation with supplement.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/CRUBTTXR/S0164121217302091.html:text/html}
}

@article{gilal_rule-based_2016,
	title = {A rule-based model for software development team composition: {Team} leader role with personality types and gender classification},
	volume = {74},
	issn = {0950-5849},
	shorttitle = {A rule-based model for software development team composition},
	url = {http://www.sciencedirect.com/science/article/pii/S0950584916300258},
	doi = {10.1016/j.infsof.2016.02.007},
	abstract = {Context
Recent studies have established the fact that the supply of handy and successful software has decreased to 6\%. The past studies have also attributed this supply failure to software development team composition factor. To overcome this problem, it is also suggested in the past studies that the soft skills of team member must be considered along with the hard skills.
Objective
Keeping in view this problem, this study aimed to look for in-depth understanding of team-lead role with personality types of member. This study also included gender to see its diverting impact on personality types and job role, since past studies have also raised many issues pertinent to these two variables.
Method
This study used the experimented data to develop the rule-based model for software development team composition by keeping gender as major effecting variable with personality. There were three independent predictor variables: Team leader role, Personality types, and Gender; and one outcome dependent variable: team performance. Additionally, personality types of team members were measured by using Myers–Briggs Type Indicator(MBTI) instrument. This study divided the experiments into two stages. The first stage was descriptive examination of factual figures of data for model development. Whereas, the second stage was predictive experiments of data for developing the model.
Results
The findings revealed that each gender emerged compatible with different types of personality for the same role. For instance, descriptive analysis part of this research highlighted that feeling(F) personality males were appropriate for team leader role, on another hand, thinking(T) personality females were suitable for the team lead role.
Conclusion
The conclusion can be drawn with the claim that the personality types of software development team roles fluctuate by gender type. Besides, this study revealed and ensured that gender should be kept in the consideration when composing teams based on personality types.},
	urldate = {2018-03-20},
	journal = {Information and Software Technology},
	author = {Gilal, Abdul Rehman and Jaafar, Jafreezal and Omar, Mazni and Basri, Shuib and Waqas, Ahmad},
	month = jun,
	year = {2016},
	keywords = {Gender, Human aspects, Myers–Briggs Type Indicator, Personality types, Rule-based, Software development, Team composition, Team leader},
	pages = {105--113},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/APWSC45S/Gilal et al. - 2016 - A rule-based model for software development team c.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/HUGTW9Q7/S0950584916300258.html:text/html}
}

@article{hill_experts_2000,
	title = {Experts' estimates of task durations in software development projects},
	volume = {18},
	issn = {0263-7863},
	url = {http://www.sciencedirect.com/science/article/pii/S0263786398000623},
	doi = {10.1016/S0263-7863(98)00062-3},
	abstract = {This paper reports a case study of how accurate were experts' subjective estimates of the durations of tasks in a software project. The data available included the estimated task durations given by experts and the subsequent actual duration times. By looking at the results of the case study, the paper shows that although the majority of tasks are overestimated, the mean error is an underestimate of about 1\%. The experts however could do even better by taking more cognisance of the number of subtasks that make up a task and hence use the WBS at a lower level when they are estimating durations.},
	number = {1},
	urldate = {2018-03-20},
	journal = {International Journal of Project Management},
	author = {Hill, J and Thomas, L. C and Allen, D. E},
	month = feb,
	year = {2000},
	pages = {13--21},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/L7JKL7YR/Hill et al. - 2000 - Experts' estimates of task durations in software d.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/VGEDQ2AE/S0263786398000623.html:text/html}
}

@article{vidal_building_2012,
	title = {Building an expert system to assist system refactorization},
	volume = {39},
	issn = {0957-4174},
	url = {http://www.sciencedirect.com/science/article/pii/S0957417411014072},
	doi = {10.1016/j.eswa.2011.09.084},
	abstract = {The separation of concerns is an important issue in the building of maintenable systems. Aspect oriented programming (AOP) is a software paradigm that allows the encapsulation of those concerns that crosscut a system and can not be modularized using current paradigms such as object-oriented programming. In this way, AOP increases the software modularization and reduces the impact when changes are made in the system. In order to take advantage of the benefits of AOP, the legacy OO systems should be migrated. To migrate object-oriented systems to aspect-oriented ones, specific refactorings for aspects should be used. This is a complex and tedious task for the developer because he/she needs to know how the refactorings should be applied and under what context. Therefore, it is desirable to have tools that help him/her through the process. In this article, we present an expert software agent, named RefactoringRecommender, that assists the developer during a refactorization of a system. The agent uses a Markovian algorithm with the goal of predicting the needed restructurings.},
	number = {3},
	urldate = {2018-03-20},
	journal = {Expert Systems with Applications},
	author = {Vidal, Santiago A. and Marcos, Claudia A.},
	month = feb,
	year = {2012},
	keywords = {Aspect refactoring, Aspect-oriented software development, Expert systems, Interface agents},
	pages = {3810--3816},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/7SLEFI8S/Vidal and Marcos - 2012 - Building an expert system to assist system refacto.pdf:application/pdf;ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/CPUKTPDT/Vidal and Marcos - 2012 - Building an expert system to assist system refacto.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/EYDSG9GK/S0957417411014072.html:text/html;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/LNYTCQY3/S0957417411014072.html:text/html}
}

@article{menolli_old_2015,
	title = {“{Old}” theories, “{New}” technologies: {Understanding} knowledge sharing and learning in {Brazilian} software development companies},
	volume = {58},
	issn = {0950-5849},
	shorttitle = {“{Old}” theories, “{New}” technologies},
	url = {http://www.sciencedirect.com/science/article/pii/S0950584914001682},
	doi = {10.1016/j.infsof.2014.07.008},
	abstract = {Context
New technologies such as social networks, wikis, blogs and other social software enable collaborative work and are important facilitators of the learning process. They provide a simple mechanism for people to communicate and collaborate and thus support the creation of knowledge. In software-development companies they are used to creating an environment in which communication and collaboration between workers take place more effectively.
Objective
This paper identifies the main tools and technologies used by software-development companies in Brazil to manage knowledge and attempts to determine how these tools and technologies relate to important knowledge-sharing and learning theories and how they support the concepts described by these theories.
Method
A survey was conducted in a group of Brazilian software development companies with high levels of process software maturity to see how they implement the Brazilian Software Processes Improvement model (MPS.Br) and use new tools and technologies. The survey used a qualitative analysis to identify which tools are used most and how frequently employees use them. The results of the analysis were compared with data from the literature on three knowledge-sharing and learning theories to understand how the use of these tools relates to the concepts proposed in these theories.
Results
The results show that some of the tools used by the companies do not apply the concepts described in the theories as they do not help promote organizational learning. Furthermore, although the companies have adopted the tools, these are not often used, mainly because they are felt not to organize information efficiently.
Conclusion
The use of certain tools can help promote several concepts described in the theories considered. Moreover, the use of these tools can help reduce the impact of, some common organizational problems. However, companies need to improve existing organizational policies that encourage employees to use these tools more regularly.},
	urldate = {2018-03-20},
	journal = {Information and Software Technology},
	author = {Menolli, André and Cunha, Maria Alexandra and Reinehr, Sheila and Malucelli, Andreia},
	month = feb,
	year = {2015},
	keywords = {Communities of practice theory, SECI, Single- and double-loop learning, Social tools, Software-development company, Survey},
	pages = {289--303},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/J76W7XL9/Menolli et al. - 2015 - “Old” theories, “New” technologies Understanding .pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/Q646VBQW/S0950584914001682.html:text/html}
}

@article{andre_formal_2011,
	title = {Formal model for assigning human resources to teams in software projects},
	volume = {53},
	issn = {0950-5849},
	url = {http://www.sciencedirect.com/science/article/pii/S0950584910002120},
	doi = {10.1016/j.infsof.2010.11.011},
	abstract = {Context
Human resources play a critical role in software project success. However, people are still the least formalized factor in today’s process models. Generally, people are assigned to roles and project teams are formed on the basis of project leaders’ experience of people, constraints (e.g. availability) and skill requirements. Yet this process has to take multiple factors into account. Few works in the literature model this process. Most of these are informal proposals focusing on the individual assignment of people to project tasks and do not consider other aspects like team formation as a whole.
Objective
In this paper we formulate a formal model for assigning human resources to software project teams. Additionally, we describe the key results of the knowledge management process enacted to output the elements of the model.
Method
The model elements were identified using the Delphi expert consultation method and applying psychological tests. The proposed model was implemented in a software tool and validated on two software development organization assignment scenarios.
Results
We built a formal model for the process of assigning human resources to software project teams. This model takes into account as many factors as possible and aids the assignment of individuals to project roles, as well as the formation of the team as a whole. We found that the rules that were identified to form software development project teams are useful. From the tests we found that model implementation was feasible (all the executions of the implemented problem-solving algorithms output feasible solutions in response times that can be considered as acceptable).
Conclusion
Using the Delphi method we were able to propose software project roles and competences. Psychological tests and data mining tools identified useful rules for forming software project teams. These were used to build a formal model. This model was built into a tool that returns role assignments in acceptable response times. This decision support tool helps managers assign people to roles and to form teams. Using the tool, project leaders can flexibly evaluate different team make-ups, taking into account several factors, as well as different constraints and objectives.},
	number = {3},
	urldate = {2018-03-20},
	journal = {Information and Software Technology},
	author = {André, Margarita and Baldoquín, María G. and Acuña, Silvia T.},
	month = mar,
	year = {2011},
	keywords = {Delphi method, Formal model, Human resources assignment, Psychological tests, Software project team},
	pages = {259--275},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/Z8UG99VP/André et al. - 2011 - Formal model for assigning human resources to team.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/7ZLZRBFC/S0950584910002120.html:text/html}
}

@article{zaraket_skill-based_2014,
	title = {Skill-based framework for optimal software project selection and resource allocation},
	volume = {234},
	issn = {0377-2217},
	url = {http://www.sciencedirect.com/science/article/pii/S037722171300790X},
	doi = {10.1016/j.ejor.2013.09.035},
	abstract = {This paper presents a conceptual framework and a mathematical formulation for software resource allocation and project selection at the level of software skills. First, we introduce a skill-based framework that considers universities, software companies, and potential projects of a country. Based on this framework, we formulate a linear integer program PMax which determines the selection of projects and the allocation of human resources that maximize profit for a certain company. We show that PMax is NP-complete. Therefore, we devise a meta-heuristic, called Tabu Select and Greedily Allocate (TSGA), to overcome the computational complexities. When compared to PMax running on CPLEX, TSGA performs 15 times faster with an accuracy of 98\% on small to large size problems where CPLEX converges. On larger problems where CPLEX does not return an answer, TSGA computes a feasible solution in the order of minutes. For demonstration, the proposed skill-based framework and the corresponding mathematical model are applied to Lebanon by performing two surveys on the Lebanese software industry and academia. The case study shows that the proposed framework and mathematical model can be used in practice to improve project selection and resource allocation decisions in software companies.},
	number = {1},
	urldate = {2018-03-20},
	journal = {European Journal of Operational Research},
	author = {Zaraket, Fadi A. and Olleik, Majd and Yassine, Ali A.},
	month = apr,
	year = {2014},
	keywords = {Meta-heuristic, Project selection, Resource allocation, Software development, Software skills},
	pages = {308--318},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/TC77IS6G/Zaraket et al. - 2014 - Skill-based framework for optimal software project.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/M8DURXJV/S037722171300790X.html:text/html}
}

@article{neves_risk_2014,
	title = {Risk management in software projects through {Knowledge} {Management} techniques: {Cases} in {Brazilian} {Incubated} {Technology}-{Based} {Firms}},
	volume = {32},
	issn = {0263-7863},
	shorttitle = {Risk management in software projects through {Knowledge} {Management} techniques},
	url = {http://www.sciencedirect.com/science/article/pii/S0263786313000288},
	doi = {10.1016/j.ijproman.2013.02.007},
	abstract = {In businesses such as the software industry, which uses knowledge as a resource, activities are knowledge intensive, requiring constant adoption of new technologies and practices. Another feature of this environment is that the industry is particularly susceptible to failure; with this in mind, the objective of this research is to analyze the integration of Knowledge Management techniques into the activity of risk management as it applies to software development projects of micro and small Brazilian incubated technology-based firms. Research methods chosen were the Multiple Case Study. The main risk factor for managers and developers is that scope or goals are often unclear or misinterpreted. For risk management, firms have found that Knowledge Management techniques of conversion “combination” would be the most applicable for use; however, those most commonly used refer to the conversion mode as “internalization.”},
	number = {1},
	urldate = {2018-03-20},
	journal = {International Journal of Project Management},
	author = {Neves, Sandra Miranda and da Silva, Carlos Eduardo Sanches and Salomon, Valério Antonio Pamplona and da Silva, Aneirson Francisco and Sotomonte, Bárbara Elizabeth Pereira},
	month = jan,
	year = {2014},
	keywords = {Incubated Technology-Based Firms (ITBF), Knowledge management, Risk management, Software development},
	pages = {125--138},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/B6KJQQWU/Neves et al. - 2014 - Risk management in software projects through Knowl.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/F7TYDEQ5/S0263786313000288.html:text/html}
}

@article{jorgensen_forecasting_2007,
	title = {Forecasting of software development work effort: {Evidence} on expert judgement and formal models},
	volume = {23},
	issn = {0169-2070},
	shorttitle = {Forecasting of software development work effort},
	url = {http://www.sciencedirect.com/science/article/pii/S016920700700074X},
	doi = {10.1016/j.ijforecast.2007.05.008},
	abstract = {The review presented in this paper examines the evidence on the use of expert judgement, formal models, and a combination of these two approaches when estimating (forecasting) software development work effort. Sixteen relevant studies were identified and reviewed. The review found that the average accuracy of expert judgement-based effort estimates was higher than the average accuracy of the models in ten of the sixteen studies. Two indicators of higher accuracy of judgement-based effort estimates were estimation models not calibrated to the organization using the model, and important contextual information possessed by the experts not included in the formal estimation models. Four of the reviewed studies evaluated effort estimates based on a combination of expert judgement and models. The mean estimation accuracy of the combination-based methods was similar to the best of that of the other estimation methods.},
	number = {3},
	urldate = {2018-03-20},
	journal = {International Journal of Forecasting},
	author = {Jørgensen, Magne},
	month = jul,
	year = {2007},
	keywords = {Combining forecasts, Comparative studies, Evaluating forecasts, Forecasting practice, Judgemental forecasting},
	pages = {449--462},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/VH399BV7/Jørgensen - 2007 - Forecasting of software development work effort E.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/QRKTZTDA/S016920700700074X.html:text/html}
}

@article{ho_developing_2004,
	title = {Developing a distributed knowledge model for knowledge management in collaborative development and implementation of an enterprise system},
	volume = {20},
	issn = {0736-5845},
	url = {http://www.sciencedirect.com/science/article/pii/S0736584504000304},
	doi = {10.1016/j.rcim.2004.03.006},
	abstract = {Recently, enterprise systems have been extensively adopted to boost enterprise competitiveness. The development and implementation of enterprise systems is a knowledge intensive procedure, being related to enterprise processes and involving information, system and software engineering technologies. Consequently, knowledge management is required to enhance the effectiveness of enterprise system development and implementation, thus helping to increase industrial competitiveness. This study aims to develop a distributed knowledge model for knowledge management, capable of supporting the collaborative development and implementation of enterprise systems. This objective can be obtained by performing the following tasks: (1) modeling and characterization of the collaborative development and implementation process, (2) identification, analysis and modeling of involved knowledge, and (3) development of a distributed knowledge model for knowledge management related to the collaborative development and implementation of enterprise systems.},
	number = {5},
	urldate = {2018-03-20},
	journal = {Robotics and Computer-Integrated Manufacturing},
	author = {Ho, Cheng-Ter and Chen, Yuh-Min and Chen, Yuh-Jen and Wang, Chin-Bin},
	month = oct,
	year = {2004},
	keywords = {Enterprise engineering, Enterprise systems, Knowledge management},
	pages = {439--456},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/UTHUTSJK/Ho et al. - 2004 - Developing a distributed knowledge model for knowl.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/G62M3JNQ/S0736584504000304.html:text/html}
}

@article{folstad_work-domain_2010,
	series = {Interplay between {Usability} {Evaluation} and {Software} {Development}},
	title = {Work-domain knowledge in usability evaluation: {Experiences} with {Cooperative} {Usability} {Testing}},
	volume = {83},
	issn = {0164-1212},
	shorttitle = {Work-domain knowledge in usability evaluation},
	url = {http://www.sciencedirect.com/science/article/pii/S0164121210000531},
	doi = {10.1016/j.jss.2010.02.026},
	abstract = {Usability evaluation helps to determine whether interactive systems support users in their work tasks. However, knowledge about those tasks and, more generally, about the work-domain is difficult to bring to bear on the processes and outcome of usability evaluation. One way to include such work-domain knowledge might be Cooperative Usability Testing, an evaluation method that consists of (a) interaction phases, similar to classic usability testing, and (b) interpretation phases, where the test participant and the moderator discuss incidents and experiences from the interaction phases. We have studied whether such interpretation phases improve the relevance of usability evaluations in the development of work-domain specific systems. The study included two development cases. We conclude that the interpretation phases generate additional insight and redesign suggestions related to observed usability problems. Also, the interpretation phases generate a substantial proportion of new usability issues, thereby providing a richer evaluation output. Feedback from the developers of the evaluated systems indicates that the usability issues that are generated in the interpretation phases have substantial impact on the software development process. The benefits of the interpretation phases may be explained by the access these provide both to the test participants’ work-domain knowledge and to their experiences as users.},
	number = {11},
	urldate = {2018-03-20},
	journal = {Journal of Systems and Software},
	author = {Følstad, Asbjørn and Hornbæk, Kasper},
	month = nov,
	year = {2010},
	keywords = {Cooperative Usability Testing, Impact, Usability evaluation, Work-domain knowledge, Work-domain specific system},
	pages = {2019--2030},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/CDTJRIJT/Følstad and Hornbæk - 2010 - Work-domain knowledge in usability evaluation Exp.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/FRU2ZC5F/S0164121210000531.html:text/html}
}

@article{mehta_information_2014,
	title = {Information technology and knowledge in software development teams: {The} role of project uncertainty},
	volume = {51},
	issn = {0378-7206},
	shorttitle = {Information technology and knowledge in software development teams},
	url = {http://www.sciencedirect.com/science/article/pii/S0378720614000226},
	doi = {10.1016/j.im.2014.02.007},
	abstract = {Knowledge is a strategic resource; information technology (IT) is presumed to facilitate its movement among organizational members. The relevant literature, however, is inconclusive. This study reports the results of the effect of IT on knowledge-sharing processes, i.e., knowledge exchange and knowledge combination, under conditions of project uncertainty. Our results indicate that both exchange and combination are necessary to fully explain the relationships and that the consideration of a project's outcome is also important. While project uncertainty confounds the knowledge-sharing processes regardless of technology, the frequency of technology use routinely increases knowledge exchange and combination in a software team.},
	number = {4},
	urldate = {2018-03-20},
	journal = {Information \& Management},
	author = {Mehta, Nikhil and Hall, Dianne and Byrd, Terry},
	month = jun,
	year = {2014},
	keywords = {Integrative information technology, Interactive information technology, Knowledge combination, Knowledge exchange, Knowledge management, Knowledge sharing, Outcome uncertainty, Project uncertainty, Requirements uncertainty, Social capital},
	pages = {417--429},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/MCVKFMGI/Mehta et al. - 2014 - Information technology and knowledge in software d.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/BA6XS6RR/S0378720614000226.html:text/html}
}

@article{lui_pair_2006,
	title = {Pair programming productivity: {Novice}–novice vs. expert–expert},
	volume = {64},
	issn = {1071-5819},
	shorttitle = {Pair programming productivity},
	url = {http://www.sciencedirect.com/science/article/pii/S1071581906000644},
	doi = {10.1016/j.ijhcs.2006.04.010},
	abstract = {Agile Software Development methodologies have grown in popularity both among academic researchers and industrial practitioners. Among the various methodologies or practices proposed, pair programming, which is concerned with two programmers collaborating on design, coding and testing, has become a controversial focus of interest. Even though some success stories have been reported with the use of pair-programming in real software development environment, many people remain rather skeptical of the claims on pair-programming productivity. Previous studies in pair programming have only addressed the basic understanding of the productivity of pairs and they have not addressed the variation in productivity between pairs of varying skills and experience, such as between novice–novice and expert–expert. Statistical productivity measurements reported by different researchers also seem to lead to contradictory conclusions. Until now, the literature has not addressed how those results and experiments were related to each other. In this paper, we propose a controlled experiment called repeat-programming which can facilitate the understanding of relationships between human experience and programming productivity. Repeat-programming can be performed when controversial issues in non-traditional programming methodologies and development productivity need to be investigated into. To illustrate how the proposed empirical experiment can put arguable, divisive problems into perspective, we have examined the productivity in pair programming as a case study. With repeat-programming, we are able to (i) better understand why results of previous pair programming control experiments reached different conclusions as to the productivity of pair programming and (ii) most importantly, present a case in which novice–novice pairs against novice solos are much more productive than expert–expert pairs against expert solos.},
	number = {9},
	urldate = {2018-03-20},
	journal = {International Journal of Human-Computer Studies},
	author = {Lui, Kim Man and Chan, Keith C. C.},
	month = sep,
	year = {2006},
	keywords = {Pair programming, Programmer productivity, Programming model},
	pages = {915--925},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/FKNHJNUB/Lui and Chan - 2006 - Pair programming productivity Novice–novice vs. e.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/7Q22BM2P/S1071581906000644.html:text/html}
}

@article{zhuge_knowledge_2002,
	title = {Knowledge flow management for distributed team software development},
	volume = {15},
	issn = {0950-7051},
	url = {http://www.sciencedirect.com/science/article/pii/S095070510200031X},
	doi = {10.1016/S0950-7051(02)00031-X},
	abstract = {Cognitive cooperation is often neglected in current team software development processes. This issue becomes more important than ever when team members are globally distributed. This paper presents a notion of knowledge flow and the related management mechanism for realizing an ordered knowledge sharing and cognitive cooperation in a geographically distributed team software development process. The knowledge flow can carry and accumulate knowledge when it goes through from one team member to another. The coordination between the knowledge flow process and the workflow process of a development team provides a new way to improve traditional team software development processes. A knowledge grid platform has been implemented to support the knowledge flow management across the Internet.},
	number = {8},
	urldate = {2018-03-20},
	journal = {Knowledge-Based Systems},
	author = {Zhuge, Hai},
	month = nov,
	year = {2002},
	keywords = {Cognitive cooperation, Knowledge flow, Knowledge grid, Team development, Workflow},
	pages = {465--471},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/NTUNV4E5/Zhuge - 2002 - Knowledge flow management for distributed team sof.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/M8JFTFEC/S095070510200031X.html:text/html}
}

@article{al-khatib_empirical_1995,
	title = {An empirical study of skills assessment for software practitioners},
	volume = {4},
	issn = {1069-0115},
	url = {http://www.sciencedirect.com/science/article/pii/1069011595900144},
	doi = {10.1016/1069-0115(95)90014-4},
	abstract = {Software professionals face the difficult challenge of keeping up with today's fast-paced technological environment. There has been much discussion about technical obsolescence in a field where the half-life of an undergraduate education is only a few years. Moreover, assessments provide measurable proof of behavioral changes, legitimizing the human resource department's role in improving productivity by rendering it quantifiable. In this paper, we describe an empirical study of the skills assessment of software practitioners. This study is based on a survey performed collaboratively by the Software Engineering Research Center (SERC), Purdue University, and IBM Training and Education, with direct participation from the IEEE. The goal of this research was the determination of the critical skills necessary for software professionals. This paper describes the survey, the structure of the questionnaire, and the skills assessment process. Skills assessment stages such as data collection, data analysis, data representation, and follow-up reassessment are also described. Detailed results of the survey and selected critical skills relating to both object-oriented and client-server technologies are presented in this paper. These assessments provide a systematic approach through which human resources departments can improve productivity during downturns by increasing the working effectiveness of software developers. We believe that university software engineering students must understand the differences between academic programming and industry software development and engineering. They must also be able to perform the activities involved with plan development, project management, and software product evaluation. We also conclude that these assessments will foster genuine commitment and motivate software practitioners to grow in a field of technology that changes daily.},
	number = {2},
	urldate = {2018-03-20},
	journal = {Information Sciences - Applications},
	author = {Al-Khatib, Wasfi G. and Bukhres, Omran and Douglas, Patricia},
	month = sep,
	year = {1995},
	pages = {83--118},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/FQV3N2RV/Al-Khatib et al. - 1995 - An empirical study of skills assessment for softwa.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/A3LC42ID/1069011595900144.html:text/html}
}

@article{collins_impacts_2008,
	title = {The impacts of function extraction technology on program comprehension: {A} controlled experiment},
	volume = {50},
	issn = {0950-5849},
	shorttitle = {The impacts of function extraction technology on program comprehension},
	url = {http://www.sciencedirect.com/science/article/pii/S0950584908000530},
	doi = {10.1016/j.infsof.2008.04.001},
	abstract = {Program comprehension is a critical, time-consuming, and highly error-prone task for software developers. Function extraction (FX) is a theory and technology that automates and supports program comprehension by calculating the semantic behaviors of programs at many levels of abstraction and displaying those behaviors in a standard, readable format in terms of the “as-built” specification of the program. In this experimental study, developers using an FX prototype tool to assist them in determining the behavior of software modules have significantly more effective program comprehension, in both increased accuracy of understanding and reduced time on task. Moreover, developers have a positive reaction toward the use of the FX technology, and use of FX does not reduce their overall comprehension of the program.},
	number = {11},
	urldate = {2018-03-20},
	journal = {Information and Software Technology},
	author = {Collins, Rosann Webb and Hevner, Alan R. and Walton, Gwendolyn H. and Linger, Richard C.},
	month = oct,
	year = {2008},
	keywords = {Behavior understanding, Function extraction, Knowledge workers, Program comprehension, Software development},
	pages = {1165--1179},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/BPH8B4XP/Collins et al. - 2008 - The impacts of function extraction technology on p.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/R52M5C67/S0950584908000530.html:text/html}
}

@article{cuena_role_2000,
	title = {The role of knowledge modelling techniques in software development: a general approach based on a knowledge management tool},
	volume = {52},
	issn = {1071-5819},
	shorttitle = {The role of knowledge modelling techniques in software development},
	url = {http://www.sciencedirect.com/science/article/pii/S107158199990232X},
	doi = {10.1006/ijhc.1999.0232},
	abstract = {The aim of the paper is to discuss the use of knowledge models to formulate general applications. First, the paper presents the recent evolution of the software field where increasing attention is paid to conceptual modelling. Then, the current state of knowledge modelling techniques is described where increased reliability is available through the modern knowledge-acquisition techniques and supporting tools. The knowledge structure manager (KSM) tool is described next. First, the concept of knowledge area is introduced as a building block where methods to perform a collection of tasks are included together with the bodies of knowledge providing the basic methods to perform the basic tasks. Then, the CONCEL language to define vocabularies of domains and the LINK language for methods formulation are introduced. Finally, the object-oriented implementation of a knowledge area is described and a general methodology for application design and maintenance supported by KSM is proposed. To illustrate the concepts and methods, an example of system for intelligent traffic management in a road network is described. This example is followed by a proposal of generalization for reuse of the resulting architecture. Finally, some concluding comments are made regarding the feasibility of using the knowledge modelling tools and methods for general application design.},
	number = {3},
	urldate = {2018-03-20},
	journal = {International Journal of Human-Computer Studies},
	author = {Cuena, J. and Molina, M.},
	month = mar,
	year = {2000},
	pages = {385--421},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/GXL9JVMV/Cuena and Molina - 2000 - The role of knowledge modelling techniques in soft.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/9SCNUXXJ/S107158199990232X.html:text/html}
}

@article{lin_withholding_2010,
	title = {Withholding effort in knowledge contribution: {The} role of social exchange and social cognitive on project teams},
	volume = {47},
	issn = {0378-7206},
	shorttitle = {Withholding effort in knowledge contribution},
	url = {http://www.sciencedirect.com/science/article/pii/S0378720610000169},
	doi = {10.1016/j.im.2010.02.001},
	abstract = {Few investigations have been made to determine what factors influence people in withholding knowledge from their colleagues. We created a construct, knowledge withholding (KW), defined as the likelihood that individuals contribute less knowledge to others in the organization than they could. We have formulated a model, based on social exchange theory and social cognition theory, to analyze the antecedents of KW from both personal and contextual perspectives. The contextual influencers were subdivided into dimensions of rational choice, normative conformity, and affective bonding to help in understanding KW. Results of a survey of 162 MIS alumni of a university, who had experienced software development, trust, distributive justice, and team-related work showed that personal outcome expectations had a substantial influence on KW.},
	number = {3},
	urldate = {2018-03-21},
	journal = {Information \& Management},
	author = {Lin, Tung-Ching and Huang, Chien-Chih},
	month = apr,
	year = {2010},
	keywords = {Knowledge contribution, Self-efficacy, Social cognitive theory, Social exchange theory, Withholding effort},
	pages = {188--196},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/BZKB8Q8B/Lin and Huang - 2010 - Withholding effort in knowledge contribution The .pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/TRNX5RIT/S0378720610000169.html:text/html}
}

@article{jorgensen_top-down_2004,
	title = {Top-down and bottom-up expert estimation of software development effort},
	volume = {46},
	issn = {0950-5849},
	url = {http://www.sciencedirect.com/science/article/pii/S0950584903000934},
	doi = {10.1016/S0950-5849(03)00093-4},
	abstract = {Expert estimation of software development effort may follow top-down or bottom-up strategies, i.e. the total effort estimate may be based on properties of the project as a whole and distributed over project activities (top-down) or calculated as the sum of the project activity estimates (bottom-up). The explorative study reported in this paper examines differences between these two strategies based on measurement and video recording of the discussions of seven estimation teams. Each estimation team applied a top-down estimation strategy on one project and a bottom-up estimation strategy on another. The main contribution of the study is the observation that the recall of very similar previously completed projects seemed to be a pre-condition for accurate top-down strategy based estimates, i.e. the abilities of the software estimators to transfer estimation experience from less similar projects was poor. This suggests that software companies should apply the bottom-up strategy unless the estimators have experience from, or access to, very similar projects.},
	number = {1},
	urldate = {2018-03-21},
	journal = {Information and Software Technology},
	author = {Jørgensen, Magne},
	month = jan,
	year = {2004},
	keywords = {Bottom-up estimation, Expert estimation, Top-down estimation},
	pages = {3--16},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/YPHVJKSB/Jørgensen - 2004 - Top-down and bottom-up expert estimation of softwa.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/74WC2LYZ/S0950584903000934.html:text/html}
}

@article{abebe_extraction_2015,
	title = {Extraction of domain concepts from the source code},
	volume = {98},
	issn = {0167-6423},
	url = {http://www.sciencedirect.com/science/article/pii/S0167642314004419},
	doi = {10.1016/j.scico.2014.09.012},
	abstract = {Program understanding involves mapping domain concepts to the code elements that implement them. Such mapping is often implicit and undocumented. However, identifier names contain relevant clues to rediscover the mapping and make it available to programmers. In this paper, we present two approaches that exploit structural and linguistic aspects of the source code to extract ontologies. The extracted ontologies are then compared in terms of the concepts they contain and the support they give to program understanding, specifically concept location. Such ontologies are composed of domain and implementation concepts as they come from the source code. To filter domain concepts, we have applied Information Retrieval (IR) based filtering techniques. We have assessed the resulting ontologies against a reference, manually defined, domain ontology. The experimentation was carried out using six real world open source programs. Results show that the ontologies extracted using the structural and linguistic aspects of the source code are complementary. We also observed that their union gives a better support to concept location than the individual ontologies. Filtering the ontologies gives a concise representation of the domain knowledge captured in the source code. The filtered ontologies, however, have been found to be less effective in supporting concept location than the unfiltered ontologies.},
	urldate = {2018-03-22},
	journal = {Science of Computer Programming},
	author = {Abebe, Surafel Lemma and Tonella, Paolo},
	month = feb,
	year = {2015},
	keywords = {Concept extraction, Concept location, Domain concept filtering, Information retrieval, Program understanding},
	pages = {680--706},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/ZE3DM73H/Abebe and Tonella - 2015 - Extraction of domain concepts from the source code.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/2AAXCJK8/S0167642314004419.html:text/html}
}

@article{sutcliffe_analysing_1992,
	title = {Analysing the novice analyst: cognitive models in software engineering},
	volume = {36},
	issn = {0020-7373},
	shorttitle = {Analysing the novice analyst},
	url = {http://www.sciencedirect.com/science/article/pii/002073739290038M},
	doi = {10.1016/0020-7373(92)90038-M},
	abstract = {Cognitive problem-solving by novice systems analysts during a requirements analysis task was investigated by protocol analysis. Protocols were collected from 13 subjects who analysed a scheduling problem. Reasoning, planning, conceptual modelling and information gathering behaviours were recorded and subject's solutions were evaluated for completeness and accuracy. The protocols showed an initial problem scoping phase followed by more detailed reasoning. Performance in analysis was not linked to any one factor although reasoning was correlated with success. Poor performance could be ascribed to failure to scope the problem, poor formation of a conceptual model of the problem domain, or insufficient testing of hypotheses. Good performance concorded with well-formed conceptual models and good reasoning/testing abilities. The implication of these results for structured systems development methods and Computer-Aided Software Engineering (CASE) tools are discussed.},
	number = {5},
	urldate = {2018-03-22},
	journal = {International Journal of Man-Machine Studies},
	author = {Sutcliffe, A. G. and Maiden, N. A. M.},
	month = may,
	year = {1992},
	pages = {719--740},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/68PY36I9/Sutcliffe and Maiden - 1992 - Analysing the novice analyst cognitive models in .pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/N2AB5M5S/002073739290038M.html:text/html;Snapshot:/Users/Felix/Zotero/storage/T9QGQB6Z/002073739290038M.html:text/html}
}

@article{yu_reviewer_2016,
	title = {Reviewer recommendation for pull-requests in {GitHub}: {What} can we learn from code review and bug assignment?},
	volume = {74},
	issn = {0950-5849},
	shorttitle = {Reviewer recommendation for pull-requests in {GitHub}},
	url = {http://www.sciencedirect.com/science/article/pii/S0950584916000069},
	doi = {10.1016/j.infsof.2016.01.004},
	abstract = {Context: The pull-based model, widely used in distributed software development, offers an extremely low barrier to entry for potential contributors (anyone can submit of contributions to any project, through pull-requests). Meanwhile, the project’s core team must act as guardians of code quality, ensuring that pull-requests are carefully inspected before being merged into the main development line. However, with pull-requests becoming increasingly popular, the need for qualified reviewers also increases. GitHub facilitates this, by enabling the crowd-sourcing of pull-request reviews to a larger community of coders than just the project’s core team, as a part of their social coding philosophy. However, having access to more potential reviewers does not necessarily mean that it’s easier to find the right ones (the “needle in a haystack” problem). If left unsupervised, this process may result in communication overhead and delayed pull-request processing. Objective: This study aims to investigate whether and how previous approaches used in bug triaging and code review can be adapted to recommending reviewers for pull-requests, and how to improve the recommendation performance. Method: First, we extend three typical approaches used in bug triaging and code review for the new challenge of assigning reviewers to pull-requests. Second, we analyze social relations between contributors and reviewers, and propose a novel approach by mining each project’s comment networks (CNs). Finally, we combine the CNs with traditional approaches, and evaluate the effectiveness of all these methods on 84 GitHub projects through both quantitative and qualitative analysis. Results: We find that CN-based recommendation can achieve, by itself, similar performance as the traditional approaches. However, the mixed approaches can achieve significant improvements compared to using either of them independently. Conclusion: Our study confirms that traditional approaches to bug triaging and code review are feasible for pull-request reviewer recommendations on GitHub. Furthermore, their performance can be improved significantly by combining them with information extracted from prior social interactions between developers on GitHub. These results prompt for novel tools to support process automation in social coding platforms, that combine social (e.g., common interests among developers) and technical factors (e.g., developers’ expertise).},
	urldate = {2018-03-22},
	journal = {Information and Software Technology},
	author = {Yu, Yue and Wang, Huaimin and Yin, Gang and Wang, Tao},
	month = jun,
	year = {2016},
	keywords = {Pull-request, Reviewer recommendation, Social network analysis},
	pages = {204--218},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/7L4PNALX/Yu et al. - 2016 - Reviewer recommendation for pull-requests in GitHu.pdf:application/pdf;ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/U66XNLY5/Yu et al. - 2016 - Reviewer recommendation for pull-requests in GitHu.pdf:application/pdf;ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/9UG6TV4Y/Yu et al. - 2016 - Reviewer recommendation for pull-requests in GitHu.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/6SWIVFHC/S0950584916000069.html:text/html;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/8XJ9P69A/S0950584916000069.html:text/html;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/BN5CMLL3/S0950584916000069.html:text/html}
}

@article{loucopoulos_knowledge-based_1989,
	title = {Knowledge-based support for requirements engineering},
	volume = {31},
	issn = {0950-5849},
	url = {http://www.sciencedirect.com/science/article/pii/0950584989901031},
	doi = {10.1016/0950-5849(89)90103-1},
	abstract = {The accurate capture and representation of user requirements plays a critical role in the construction of effective and flexible information systems. Despite the introduction of development methods and CASE tools in the project life-cycle, the process of developing a requirements specification remains problematical. The paper proposes that the process of requirements specification should be considered from a viewpoint that is close to an analyst's cognitive processes. To this end the paper presents a requirements specification support environment that is based on the premise that it is advantageous to carry out modelling at the early stages of development independent of any particular software engineering method. This support environment, known as the Analyst Assist system, exploits knowledge-based paradigms for the capture and modelling of facts about an application domain, which are then transformed into a functional specification represented in the Jackson System Development method.},
	number = {3},
	urldate = {2018-03-22},
	journal = {Information and Software Technology},
	author = {Loucopoulos, P and Champion, REM},
	month = apr,
	year = {1989},
	keywords = {information systems, knowledge-based environments, requirements engineering, systems development methods},
	pages = {123--135},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/VSELN99A/Loucopoulos and Champion - 1989 - Knowledge-based support for requirements engineeri.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/IWHMPCAH/0950584989901031.html:text/html}
}

@article{whitefield_case_1992,
	title = {Case study in human factors evaluation},
	volume = {34},
	issn = {0950-5849},
	url = {http://www.sciencedirect.com/science/article/pii/095058499290036O},
	doi = {10.1016/0950-5849(92)90036-O},
	abstract = {A human factors (HF) evaluation, carried out as part of the development of a set of computer-aided software engineering (CASE) tools, is presented and is used as an example of the processes and products of typical HF evaluation practice. The role of HF evaluation as a part of software quality assurance is identified, and typical current practice of HF evaluation is characterized. The details of the particular evaluation are then reported. First, its processes are described; these are determined by relating features of the system under development to the desired focus, actual context, and possible methods of the evaluation. Then the products of the evaluation are described; these products or outcomes are formulated as the user-computer interaction difficulties that were identified, grouped into three types (termed task, presentation, and device difficulties). The characteristics of each type of difficulty are discussed, in terms of their ease of identification, their generality across application domains, the HF knowledge that they draw on, and their relationship to redesign. The conclusion considers the usefulness of the evaluation, the inadequacies of system development practice it implies, and how to incorporate HF evaluation into an improved system development practice.},
	number = {7},
	urldate = {2018-03-22},
	journal = {Information and Software Technology},
	author = {Whitefield, A and Sutcliffe, A},
	month = jul,
	year = {1992},
	keywords = {case study, evaluation, human factors, human-computer interaction, software quality assurance, system development, usability},
	pages = {443--451},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/9M6U2MA2/Whitefield and Sutcliffe - 1992 - Case study in human factors evaluation.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/4FWUSXHA/095058499290036O.html:text/html}
}

@article{agarwal_role_1996,
	title = {The role of prior experience and task characteristics in object-oriented modeling: an empirical study},
	volume = {45},
	issn = {1071-5819},
	shorttitle = {The role of prior experience and task characteristics in object-oriented modeling},
	url = {http://www.sciencedirect.com/science/article/pii/S1071581996900725},
	doi = {10.1006/ijhc.1996.0072},
	abstract = {The object-oriented methodology for systems analysis and design has generated considerable interest recently. Object-orientation represents a fundamental shift in focus from the traditional process-oriented approaches that have dominated software development for over two decades. Although there is anecdotal evidence to suggest that systems analysts experienced in process-oriented modeling approaches will find it difficult to apply objective-oriented methodologies, there is no empirical work investigating the relationship between a procedural mindset and an ability to learn and apply object-oriented concepts. Prior research in human problem solving, however, suggests that the efficacy of a systems analysis and design methodology should be judged in the context of the task to which it is applied. To explore the effects of prior experience and task characteristics on performance in systems analysis and design, we conducted an experiment in which two groups of subjects applied the object-oriented methodology to two types of tasks, one process-oriented and the other object-oriented. One group had significant prior experience in process-oriented methodologies, while the other group had no formal experience. Both groups were provided identical training in object-oriented analysis and design prior to the experiment. The results of the study suggest that both prior experience and task characteristics play a role in determining performance. The implications that follow for research and practice are discussed.},
	number = {6},
	urldate = {2018-03-22},
	journal = {International Journal of Human-Computer Studies},
	author = {Agarwal, Ritu and Sinha, Atish P. and Tanniru, Mohan},
	month = dec,
	year = {1996},
	pages = {639--667},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/LY4F7KQ4/Agarwal et al. - 1996 - The role of prior experience and task characterist.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/UBLCPWY5/S1071581996900725.html:text/html}
}

@article{kwiatkowski_recovering_2013,
	title = {Recovering management information from source code},
	volume = {78},
	issn = {0167-6423},
	url = {http://www.sciencedirect.com/science/article/pii/S016764231200144X},
	doi = {10.1016/j.scico.2012.07.016},
	abstract = {IT has become a production means for many organizations and an important element of business strategy. Even though its effective management is a must, reality shows that this area still remains in its infancy. IT management relies profoundly on relevant information which enables risk mitigation or cost control. However, the needed information is either missing or its gathering boils down to daunting tasks. We propose an approach to recovery of management information from the essence of IT; the software’s source code. In this paper we show how to employ source code analysis techniques and recover management information. In our approach we exploit the potential of the concealed data which resides in the source code statements, source comments, and also compiler listings. We show how to depart from the raw sources, extract data, organize it, and eventually utilize so that the bit level data provides IT executives with support at the portfolio level. Our approach is pragmatic as we rely on real management questions, best practices in software engineering, and also IT market specifics. We enable, for instance, an assessment of the IT-portfolio market value, support for carrying out what-if scenarios, or identification and evaluation of the hidden risks for IT-portfolio maintainability. The study is based on a real-life IT-portfolio which supports business functions of an organization operating in the financial sector. The IT-portfolio comprises Cobol applications run on a mainframe with the total number of lines of code amounting to over 18 million. The approach we propose is suited for facilitation within a large organization. It provides for a fact-based support for strategic decision making at the portfolio level.},
	number = {9},
	urldate = {2018-03-22},
	journal = {Science of Computer Programming},
	author = {Kwiatkowski, Ł. M. and Verhoef, C.},
	month = sep,
	year = {2013},
	keywords = {Automated data extraction, Case study, Cobol, Compilers, Cost control, Information retrieval, IT assets, IT metrics, IT-portfolio management, Latent Semantic Indexing, Legacy systems, Lexical analysis, LSI, Management information, Market value, Obsolete language constructs, Operational risk, Risk mitigation, Scenario analysis, Source code analysis, Source code comments, Technology risk, Vendor locks, Volatility},
	pages = {1368--1406},
	file = {ScienceDirect Full Text PDF:/Users/Felix/Zotero/storage/62X3L94V/Kwiatkowski and Verhoef - 2013 - Recovering management information from source code.pdf:application/pdf;ScienceDirect Snapshot:/Users/Felix/Zotero/storage/9K5ERBT9/S016764231200144X.html:text/html}
}

@incollection{day_human_1993,
	title = {Human {Factors} in {Human}–{Computer} {System} {Design}},
	volume = {36},
	url = {http://www.sciencedirect.com/science/article/pii/S0065245808602740},
	abstract = {This chapter focuses on the importance and role of human factors specialists in the design of human-computer systems. This chapter has several purposes: (1) to introduce the field of human factors, also known as “ergonomics,” (2) to describe the role and importance of human factors specialists in the design and development of human-computer systems, and (3) to describe several of the key methodologies used by human factors specialists. A brief overview of the discipline of human factors is presented as a background for those unfamiliar with the field. The relation between user interface design and usability is discussed and an overview of general principles for designing usable systems and the type of information that is relevant for user interface design is presented. Models of the software development process are described. They present a framework for a discussion of the roles of the human factors specialist on design and development teams and the specific human factors activities that should be integrated into the development process. Task analysis, user interface prototyping, and usability testing-key methodologies used by human factors specialists are described and; the importance and the complexities of designing for consistency from the user's perspective are discussed. Because the value of having a human factors specialist on the design and development team is often not understood and the associated costs are often regarded as too high, the chapter cover the reasons it is beneficial to have a human factors specialist on the team and the benefits—relative to the costs—of investing in human factors activities to ensure excellent user interface design.},
	urldate = {2018-03-22},
	booktitle = {Advances in {Computers}},
	publisher = {Elsevier},
	author = {Day, Mary Carol and Boyce, Susan J.},
	editor = {Yovits, Marshall C.},
	month = jan,
	year = {1993},
	doi = {10.1016/S0065-2458(08)60274-0},
	pages = {333--430},
	file = {ScienceDirect Snapshot:/Users/Felix/Zotero/storage/QDQSUUYW/S0065245808602740.html:text/html}
}